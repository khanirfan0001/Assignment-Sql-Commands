USE sakila;

-- 1. **Rank the customers based on the total amount they've spent on rentals.**

SELECT c.customer_id,SUM(p.amount)Total_Amount,RANK() OVER(ORDER BY SUM(p.amount) DESC)Rank_ 
FROM payment p INNER JOIN customer c ON c.customer_id = p.customer_id
GROUP BY c.customer_id ORDER BY Total_Amount DESC;


--  2. **Calculate the cumulative revenue generated by each film over time.**

SELECT f.title,p.payment_date,SUM(p.amount) OVER(ORDER BY p.payment_date) cumulative_revenue
FROM film f INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id group BY title;
 
 
 --  3. **Determine the average rental duration for each film, considering films with similar lengths.**
 
 SELECT title,length,AVG(rental_duration) OVER(ORDER BY length)AVG_Rental_Duration 
 FROM film;

 
 --  4. **Identify the top 3 films in each category based on their rental counts.**
 
SELECT c.name, f.title,COUNT(r.rental_id) rental_count FROM category c
INNER JOIN film_category fc ON c.category_id = fc.category_id
INNER JOIN film f ON fc.film_id = f.film_id
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY name,title ORDER BY name, rental_count DESC LIMIT 3;

 
 
 --  5. **Calculate the difference in rental counts between each customer's total rentals 
-- and the average rentals across all customers.**

SELECT customer_id, COUNT(*) - AVG(COUNT(*)) OVER() AS rental_count_difference
FROM rental
GROUP BY customer_id;


--  6. **Find the monthly revenue trend for the entire rental store over time.** 

SELECT month(payment_date), amount, amount - LAG (amount) 
OVER (ORDER BY payment_date asc) revenue_trend FROM payment;


--  7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

WITH customer_spending AS (
SELECT customer_id, SUM(amount) AS total_spending FROM payment
GROUP BY customer_id), customer_percentile AS (
SELECT customer_id, total_spending, 
PERCENT_RANK() OVER (ORDER BY total_spending DESC) AS percentile_rank
FROM customer_spending)
SELECT customer_id, total_spending FROM customer_percentile
WHERE percentile_rank <= 0.2 ORDER BY total_spending DESC;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

SELECT c.name, COUNT(r.rental_id) AS rental_count,
SUM(COUNT(r.rental_id)) OVER (ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM rental r INNER JOIN inventory i ON r.inventory_id = i.inventory_id
INNER JOIN film f ON i.film_id = f.film_id
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY name ORDER BY rental_count DESC;

--  9. **Find the films that have been rented less than the average rental count for their respective categories.**

SELECT f.title, c.name, COUNT(r.rental_id) rental_count FROM rental r
INNER JOIN inventory i ON r.inventory_id = i.inventory_id
INNER JOIN film f ON i.film_id = f.film_id
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name, f.film_id
HAVING rental_count < (
    SELECT AVG(rental_count)
    FROM (SELECT COUNT(r.rental_id) AS rental_count FROM rental r
        INNER JOIN inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN film f ON i.film_id = f.film_id
        INNER JOIN film_category fc ON f.film_id = fc.film_id
        INNER JOIN category c ON fc.category_id = c.category_id
        GROUP BY c.name, f.film_id) rental_counts
    WHERE c.name = c.name) ORDER BY c.name ASC, rental_count ASC;
 

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

SELECT month(payment_date) month,SUM(amount) AS Total_Revenue FROM payment
GROUP BY month order by Total_Revenue desc LIMIT 5;
